# Multi-stage Dockerfile optimized for ODROID C4 (ARM64)
# Lightweight production build for ARM64 architecture

# Build stage
FROM node:18-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./
COPY next.config.ts ./
COPY components.json ./

# Install dependencies (only production dependencies for smaller image)
RUN npm ci --only=production && npm cache clean --force

# Copy source code
COPY src ./src
COPY public ./public

# Set build environment for ODROID production
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV GENERATE_SOURCEMAP=false

# Build the application with memory optimization
RUN NODE_OPTIONS="--max-old-space-size=1024" npm run build

# Production stage
FROM node:18-alpine AS runner

# Install security updates and required packages
RUN apk add --no-cache dumb-init && \
    addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

WORKDIR /app

# Copy built application
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/public ./public

# Create environment file
COPY --chown=nextjs:nodejs .env.production ./.env.local

USER nextjs

EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "server.js"]